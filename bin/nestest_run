#!/usr/bin/env ruby

require 'th8' # For Bus
require 'cpudsl'
require 'cpu6502'
require 'mlog'

def main
  exit unless ARGV[1]
  breakpoint = ARGV[2].to_i(16) if ARGV[2]

  log = MLog.new(File.new(ARGV[1], 'w')) do |out,c|
    out.write(sprintf("%04X A:%02X X:%02X Y:%02X P:%02X SP:%02X\n", c.register_PC, c.register_A, c.register_X, c.register_Y, c.register_F, c.register_S))
    out.flush
  end

  bus = ::TH8::Bus.new
  cpu = ::MOS6502.new(bus)
  cpu.set_register_PC(0xC000)

  rom = bus.attach('ROM', 0x8000, 0xBFFF)
  rom.alloc(0x4000)
  rom2 = bus.attach('ROM (mirror)', 0xC000, 0xFFFF)

  ram = bus.attach('RAM', 0x0000, 0x07FF)
  ram.alloc(0x0800)
  ram2 = bus.attach('RAM (m1)', 0x0800, 0x0FFF)
  ram3 = bus.attach('RAM (m2)', 0x1000, 0x17FF)
  ram4 = bus.attach('RAM (m3)', 0x1800, 0x1FFF)

  [ram,rom].each do |x|
    x.set_read  { |offset| @mem[offset] }
  end
  ram.set_write { |offset, byte| @mem[offset] = (byte & 0xff) }
  [ram2, ram3, ram4].each do |x|
    x.set_read  { |offset| ram.read(offset) }
    x.set_write { |offset, byte| ram.write(offset, byte) }
  end
  rom2.set_read { |offset| rom.read(offset) }

  File.read(ARGV[0]).bytes.drop(16).take(0x4000).each_with_index do |byte, i|
    rom.instance_variable_get(:@mem)[i] = byte
  end

  loop do
    top = bus.dump(0x00, 0x100)
    mid = bus.dump(0x0600, 0x100)
    bot = bus.dump(cpu.program_counter & 0xFFF0, 0x20)
             .split(/[ \n]/)
    bot[cpu.program_counter & 0xf].sub!(/^/, "\033[41m").sub!(/$/, "\033[0m")
    bot = bot.each_slice(16).map { |x| x.join(' ') }.join("\n")

    disasm = bus.dump(cpu.program_counter, 0x20)
                .split(/[ \n]/)
                .each_with_index
                .map { |opcode, index| [opcode.to_i(16), cpu.program_counter + index] }
                .reduce([[], 0]) do |(disassembly, bytes_remaining), (opcode, address)|
                                   if bytes_remaining < 1
                                     next_disasm, bytes_skip = cpu.disassemble(opcode, address)
                                     [disassembly + [sprintf('%04X: ', address) + next_disasm], bytes_skip]
                                   else
                                     [disassembly, bytes_remaining-1]
                                   end
                                 end
                .first

    pc = '%04X' % cpu.register_PC
    a = '%02X' % cpu.register_A
    x = '%02X' % cpu.register_X
    s = '%02X' % cpu.register_S
    y = '%02X' % cpu.register_Y

    print "\e[H\e[2J"
    puts "pc: #{pc}  a: #{a}  x: #{x}  y: #{y}  s: #{s}"
    puts "N: #{cpu.flag_N} V: #{cpu.flag_V} B: #{cpu.flag_B} D: #{cpu.flag_D} I: #{cpu.flag_I} Z: #{cpu.flag_Z} C: #{cpu.flag_C}"
    puts '-----------------------------------------------'
    puts top
    puts '-----------------------------------------------'
    puts mid
    puts '-----------------------------------------------'
    puts bot
    puts
    puts disasm.take(3).join("\n")

    log.write(cpu) if cpu.cycles_remaining.zero?
    breakpoint = nil if cpu.register_PC == breakpoint
    $stdin.readline if breakpoint.nil?

    cpu.clock
  end
end

main
